# problem_config.yaml for TSP Heuristic

# Target score to aim for (higher is better). Can be used for early stopping.
# For TSP, a score of 1/tour_length means we want higher.
# Let's set a placeholder, can be adjusted.
target_metric_value: 0.1 # Corresponds to tour length 10

# Information for the LLM about the function to be generated
function_details:
  name: "solve_tsp_heuristic"
  input_params_string: "graph_matrix" # e.g., [[(0,0), (1,5), (2,3)], [(1,0), (0,0), (3,1)], ...]
                                      # where graph_matrix[i][j] = distance from city i to city j
                                      # or a list of (x,y) coordinates if distances are Euclidean

# Initial seed program for the problem.
# This is a very naive heuristic: just visit cities in their given order.
seed_program_code: |
  def solve_tsp_heuristic(graph_matrix):
      """
      Solves the Traveling Salesperson Problem using a naive heuristic.
      Simply visits cities in the order they appear (0, 1, 2, ...).

      Args:
          graph_matrix: A list of lists representing the adjacency matrix of a complete graph.
                        graph_matrix[i][j] is the distance from city i to city j.
                        Assumes a square matrix where len(graph_matrix) is the number of cities.

      Returns:
          A list of node indices representing the order of cities to visit.
          Example: [0, 1, 2, 3] for 4 cities.
      """
      if not graph_matrix or not isinstance(graph_matrix, list):
          # Basic validation
          return []
      
      num_cities = len(graph_matrix)
      if num_cities == 0:
          return []

      # Naive tour: visit cities in their original order
      tour = list(range(num_cities))
      return tour

# Optional: Additional problem-specific settings can be added here if needed by the evaluator
# or other parts of the system. For example:
# problem_specific_settings:
#   benchmark_instances_file: "problems/tsp_heuristic/tsp_benchmarks.json"
#   timeout_per_instance_ms: 1000 