problem_specific_parameters:
  # Placeholder for parameters specific to the 4x4 complex tensor decomposition
  # For example:
  # dimensions: [4, 4, 4, 4] # Or however the tensor is structured
  # target_rank: R # The desired rank of decomposition
  # complexity_measure: "multiplications"

# Evaluation criteria specific to this problem
evaluation:
  # Example:
  # target_metric_name: "accuracy" 
  # target_metric_value: 1.0
  # comparison_mode: "equals" # or "greater_than_or_equal_to" etc.
  # timeout_seconds_per_test: 60
  pass_fail_logic: "custom" # Indicates that evaluator_logic.py will determine pass/fail

# Information for the LLM about the function to be generated
function_details:
  name: "decompose_tensor"
  input_params_string: "tensor_input" # Defines the parameters for the function signature
  # Input/output description can be added here or in prompt_context.yaml
  # Example:
  # inputs: "A 4x4x4x4 complex tensor (represented as nested lists or numpy array if allowed)"
  # outputs: "Factors of the decomposition, and number of complex multiplications used."

# Any disallowed keywords or patterns for this specific problem
# (supplements global disallowed keywords if any)
disallowed_patterns:
  - "import numpy" # Example, if we want to avoid numpy for this specific problem initially
  - "import cupy"
  - "import tensorflow"
  - "import torch"
  - "import jax"

seed_program_code: |
  def decompose_tensor(tensor_input):
      """Placeholder for 4x4 complex matrix tensor decomposition.

      Args:
          tensor_input: The 4x4x4x4 complex tensor.
                        Representation TBD (e.g., nested lists of complex numbers).

      Returns:
          A tuple or dictionary containing the decomposed factors
          and the number of complex multiplications used.
          Return format TBD based on AlphaEvolve paper's approach.
      """

      # TODO: Implement the seed logic or a very naive decomposition.
      # For AlphaEvolve, the initial "program" might be a representation
      # of Strassen's original 49-multiplication algorithm or even a direct
      # (64-multiplication) algorithm if starting from scratch.
      
      # Example: Representing complex numbers as tuples (real, imag)
      # a = (1, 2) # 1 + 2j
      # b = (3, 4) # 3 + 4j
      # Complex multiplication: (a_r*b_r - a_i*b_i, a_r*b_i + a_i*b_r)
      # This requires 4 real multiplications and 2 real additions/subtractions.
      # Or, Karatsuba for complex numbers: 3 real mult, 5 real add/sub.

      num_complex_multiplications = -1 # Placeholder, to be calculated
      decomposed_factors = None      # Placeholder

      # This seed program should define the function signature expected by the LLM.
      # It might not do anything useful yet.
      # print("Warning: Seed program 'decompose_tensor' is not implemented.") # Removed print

      return decomposed_factors, num_complex_multiplications 