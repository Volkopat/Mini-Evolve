problem_description: |
  Evolve a Python function solve(matrix_a, matrix_b) that performs matrix multiplication of two given matrices and returns the resulting matrix. Ensure the matrices are compatible for multiplication.

function_signature_info: |
  The target function MUST be named `solve` (as specified in problem_config.yaml under function_details.name).
  It takes two arguments: `matrix_a` and `matrix_b`.
  - `matrix_a`: A list of lists representing the first matrix.
  - `matrix_b`: A list of lists representing the second matrix.
  The function must return a new list of lists representing the product matrix.
  If matrices are not compatible for multiplication, the function should return `None` or an empty list (e.g., `[]`).

constraints_text: |
  - The solution MUST be implemented in pure Python.
  - Do NOT use NumPy, SciPy, or any other external libraries for the matrix multiplication itself.
  - Implement the core multiplication logic using nested loops and basic arithmetic.
  - The function must correctly handle matrix dimensions for multiplication.
  - Input matrix elements will be integers.

example_code_structure: |
  # This is just a conceptual guide, not a strict template.
  def solve(matrix_a, matrix_b):
      if not matrix_a or not matrix_a[0] or not matrix_b or not matrix_b[0]:
          return [] # Or None for incompatibility
      
      rows_a = len(matrix_a)
      cols_a = len(matrix_a[0])
      rows_b = len(matrix_b)
      cols_b = len(matrix_b[0])

      if cols_a != rows_b:
          return [] # Or None for incompatibility

      # Initialize result_matrix with zeros
      result_matrix = [[0 for _ in range(cols_b)] for _ in range(rows_a)]

      # Perform multiplication
      for i in range(rows_a):
          for j in range(cols_b):
              for k in range(cols_a): # or rows_b
                  result_matrix[i][j] += matrix_a[i][k] * matrix_b[k][j]
      
      return result_matrix

meta_context: |
  - This is a foundational problem in linear algebra.
  - Focus on a correct and robust implementation of the standard algorithm.
  - The evaluation will test against various matrix sizes (within configured limits) and values, including edge cases like empty matrices or incompatible dimensions. 