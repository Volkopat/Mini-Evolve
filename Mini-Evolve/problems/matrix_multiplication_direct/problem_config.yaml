# Problem-specific configuration for direct matrix multiplication
problem_specific_parameters:
  matrix_max_dim_size: 5
  matrix_min_dim_size: 2
  matrix_element_min: -10
  matrix_element_max: 10
  num_test_cases_per_eval: 20 # Number of random matrix pairs to test

evaluation:
  pass_fail_logic: "custom" # Indicates that evaluator_logic.py will determine pass/fail
  # Potentially add other evaluation criteria if needed, like timeout_seconds_per_test

function_details:
  name: "solve"
  input_params_string: "matrix_a, matrix_b" # Defines the parameters for the function signature
  # problem_description and constraints_text are now primarily in prompt_context.yaml
  # but can be briefly mentioned or used here for other config purposes if necessary.

disallowed_patterns:
  - "import numpy"
  - "import scipy"
  # Add any other libraries that should be strictly forbidden for this problem.

seed_program_code: |
  def solve(matrix_a, matrix_b):
      # Basic structure, may not be correct or complete
      # This seed is deliberately flawed to give LLM something to fix.
      if not matrix_a or not matrix_a[0] or not matrix_b or not matrix_b[0]:
          return [] # Or None
      
      rows_a = len(matrix_a)
      cols_a = len(matrix_a[0])
      rows_b = len(matrix_b)
      cols_b = len(matrix_b[0])

      if cols_a != rows_b:
          # print("Matrices not compatible for multiplication") # Not allowed in final code
          return [] # Or None

      # Initialize result matrix with zeros (or placeholder)
      result_matrix = [[0 for _ in range(cols_b)] for _ in range(rows_a)]
      
      # A very incomplete or incorrect multiplication attempt
      # Example: only operates on the first element or does element-wise which is wrong
      # for r_a in range(rows_a):
      #    for c_b in range(cols_b):
      #        if r_a < rows_b and c_b < cols_a : # incorrect indexing if trying to map directly
      #             result_matrix[r_a][c_b] = matrix_a[r_a][0] * matrix_b[0][c_b] # Still not full dot product logic
                          
      return result_matrix # Return whatever it managed to compute, likely just zeros or a badly computed matrix 